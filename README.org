#+TITLE: dmscripts
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: A collection of dmscripts
#+STARTUP: overview

* GRUB Reboot to Windows
To reboot to windows without having to interact with grub during boot time create an executable shell script that will switch grub next 1 boot to a named entry, in my case it is a custom entry "*Windows 10*", but by default it be something like "*Windows boot manager*" as created by =os-prober=.
- Needs to be run as =sudo=
#+begin_src shell
# /home/user/.local/bin/winreboot

#!/usr/bin/env bash
grub-reboot "Windows 10" && systemctl reboot
#+end_src

If you want to call this from the Desktop Environment you may need to allow the script to be run without the =sudo= password. This can be achieved by adding it to your =sudoers= list as per below.
- It is recommended that you change the owner of the file to root and remove write permissions for other users so it cannot be changed without the root password as this can become a security vulnerability (anything in the script will be executed as =sudo= without a password prompt after all)
- This script is actually called in the [[#power][dmpower]] script with =sudo= to make use of this
#+begin_src conf
# /etc/sudoers.d/00-windows-reboot

user ALL=(ALL) NOPASSWD: /home/user/.local/bin/winreboot
#+end_src

* Notify
Manage notifications
** Dependencies
|-------------+---------------------|
| App         | Comment             |
|-------------+---------------------|
| =rofi -dmenu= | Triggers dmenu      |
| =dunst=       | Notification server |
|-------------+---------------------|

** Setup
Get the number of notifications
#+begin_src shell :tangle dmnotify :shebang #!/usr/bin/env bash
NOTIF_COUNT_DISPLAYED=$(dunstctl count displayed)
NOTIF_COUNT_HISTORY=$(dunstctl count history)
NOTIF_COUNT_WAIT=$(dunstctl count waiting)
#+end_src

** DMenu
#+begin_src shell :tangle dmnotify
dmenu_prompt="Notifications"

declare -a options=(
    "Show recent"
    "Close"
    "Close all"
    "Context menu"
)
#+end_src

** Main Function
#+begin_src shell :tangle dmnotify
execute_choice () {
    if [[ $1 == 'recents' ]]; then
        for ((i = 1; i <= $NOTIF_COUNT_HISTORY; i++));
        do
            dunstctl history-pop
        done

    elif [[ $1 == 'close' ]]; then dunstctl close
    elif [[ $1 == 'clear' ]]; then dunstctl close-all
    else dunstctl context
    fi
}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell :tangle dmnotify
if [ ! $# -eq 0 ]; then execute_choice $1
#+end_src

If no arguments were passed, present dmenu to user with options defined in the [[#dmenu][DMenu]] section
We use "printf '%s\n'" to format the array one item to a line
#+begin_src shell :tangle dmnotify
else
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${dmenu_prompt}")
fi
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell :tangle dmnotify
case $choice in
    'Show recent') execute_choice recents ;;
    'Close') execute_choice close ;;
    'Close all') execute_choice close-all ;;
    'Context menu') execute_choice context ;;
esac
#+end_src

* Power
Logout, shutdown, reboot or lock screen
** Dependencies
|--------------+-------------------------|
| App          | Comment                 |
|--------------+-------------------------|
| =rofi -dmenu=  | Triggers dmenu          |
| =systemd=      | System management       |
| =xscreensaver= | Toggle screensaver      |
| =notify-send=  | Trigger a notifications |
|--------------+-------------------------|

** Setup
#+begin_src shell :tangle dmpower :shebang #!/usr/bin/env bash
# Define LOCKER in .xprofile to set to different LOCKER program
# LOCKER="${LOCKER:-lock}"
LOCKER="xscreensaver-command -lock"

# use notify-send if run in dumb term
OUTPUT="echo"
if [[ ${TERM} == 'dumb' ]]; then
    OUTPUT="notify-send"
fi

yesno(){
    # shellcheck disable=SC2005
    echo "$(echo -e "No\nYes" | rofi -dmenu -i -p "${1}")"
}

declare -a MANAGERS=(
    "awesome"
    "bspwm"
    "dwm"
    "spectrwm"
    "xmonad"
    "qtile"
)
#+end_src

** DMenu
#+begin_src shell :tangle dmpower
dmenu_prompt="Shutdown menu"

declare -a options=(
    "Suspend"
    "Reboot"
    "Shutdown"
    "Logout"
    "Lock screen"
    "Reboot to Windows"
    "Quit"
)
#+end_src

** Main Function
Check [[#grub-reboot-to-windows][GRUB Reboot to Windows]] for the =winreboot= script setup
#+begin_src shell :tangle dmpower
execute_choice () {
    if [[ $1 == 'lock' ]]; then ${LOCKER}
    elif [[ $1 == 'reboot' ]]; then systemctl reboot
    elif [[ $1 == 'windows' ]]; then sudo $HOME/.local/bin/winreboot
    elif [[ $1 == 'poweroff' ]]; then systemctl poweroff
    elif [[ $1 == 'suspend' ]]; then systemctl suspend
    elif [[ $1 == 'quit' ]]; then ${OUTPUT} "Program terminated." && exit 0
    else ${OUTPUT} "Program terminated." && exit 0
    fi
}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell :tangle dmpower
if [ ! $# -eq 0 ]; then execute_choice $1
#+end_src

If no arguments were passed, present dmenu to user with options defined in the [[#dmenu-1][DMenu]] section
We use "printf '%s\n'" to format the array one item to a line
#+begin_src shell :tangle dmpower
else
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${dmenu_prompt}")
fi
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell :tangle dmpower
case $choice in
    'Logout')
        if [[ $(yesno "Logout?") == "Yes" ]]; then
            for manager in "${MANAGERS[@]}"; do
                killall "${manager}" || ${OUTPUT} "Process ${manager} was not running."
            done
        else
            ${OUTPUT} "User chose not to logout." && exit 1
        fi
        ;;
    'Lock screen') execute_choice lock ;;
    'Reboot')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice reboot
        else
            ${OUTPUT} "User chose not to reboot." && exit 0
        fi
        ;;
    'Reboot to Windows')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice windows
        else
            ${OUTPUT} "User chose not to reboot." && exit 0
        fi
        ;;
    'Shutdown')
        if [[ $(yesno "Shutdown?") == "Yes" ]]; then
            execute_choice poweroff
        else
            ${OUTPUT} "User chose not to shutdown." && exit 0
        fi
        ;;
    'Suspend')
        if [[ $(yesno "Suspend?") == "Yes" ]]; then
            execute_choice suspend
        else
            ${OUTPUT} "User chose not to suspend." && exit 0
        fi
        ;;
    'Quit') execute_choice quit ;;
    # It is a common practice to use the wildcard asterisk symbol (*) as a final
    # pattern to define the default case. This pattern will always match.
    ,*)
        exit 0
        ;;
esac
#+end_src

* Screenshot
Take a screenshot
** Dependencies
|-------------+-------------------|
| App         | Comment           |
|-------------+-------------------|
| =rofi -dmenu= | Triggers dmenu    |
| =xrandr=      | Screen management |
| =main=        | Screenshot tool   |
|-------------+-------------------|

** Setup
#+begin_src shell :tangle dmscreenshot :shebang #!/usr/bin/env bash
# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

# Specifying a directory to save our screenshots and make sure it exists
SCREENSHOT_DIR="$HOME/Pictures/Screenshots"
mkdir -p "${SCREENSHOT_DIR}"

# Filename Time Stamp Format
getTimeStamp() {
    date '+%Y-%m-%d_%T'
}

EXECUTE=true
MAIM_ARGS=""

# Get monitors and their settings for maim
DISPLAYS=$(xrandr --listactivemonitors | grep '+' | awk '{print $4, $3}' | awk -F'[x/+* ]' '{print $1,$2"x"$4"+"$6"+"$7}')

# Add monitor data
IFS=$'\n'
declare -A DISPLAY_MODE
for d in ${DISPLAYS}; do
    name=$(echo "${d}" | awk '{print $1}')
    area="$(echo "${d}" | awk '{print $2}')"
    DISPLAY_MODE[${name}]="${area}"
done
unset IFS
#+end_src

** DMenu
#+begin_src shell :tangle dmscreenshot
dmenu_prompt="Select what to screenshot"

declare -a options=(
    "full"
    "screen"
    "window"
    "area"
)
#+end_src

** Main Function
#+begin_src shell :tangle dmscreenshot
takeScreenshot(){

    if [[ $1 == 'full' ]]; then
        MAIM_ARGS="-u -m 1"

    elif [[ $1 == 'screen' ]]; then
        MAIM_ARGS="-u -g ${DISPLAY_MODE['DVI-D-0']} -m 1"

    elif [[ $1 == 'window' ]]; then
        active_window=$(xdotool getactivewindow)
        MAIM_ARGS="-u -B -i ${active_window} -m 1"

    elif [[ $1 == 'area' ]]; then
        MAIM_ARGS="-u -B -s -n -m 1"

    else
        EXECUTE=false
        if [[ $1 == 'debug' ]]; then
            echo ${DISPLAY_MODE["DVI-D-0"]}

        else
            echo  "
Invalid Argument!
Only the following arguments are accepted:

  full   - Take a screenshot of the whole Workspace containing All Displays
  screen - Take a screenshot of the whole Active Screen
  window - Take a screenshot of the currently Active Window
  area   - Turn cursor into a crosshair to select an Area of the screen to screenshot
"
        fi
    fi


    if $EXECUTE; then
        maim ${MAIM_ARGS} "${SCREENSHOT_DIR}/$(getTimeStamp).png"
    fi

}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell :tangle dmscreenshot
if [ ! $# -eq 0 ]; then takeScreenshot $1
#+end_src

If no arguments were passed, present dmenu to user with options defined in the [[#dmenu-2][DMenu]] section
We use "printf '%s\n'" to format the array one item to a line
#+begin_src shell :tangle dmscreenshot
else
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${dmenu_prompt}")
    takeScreenshot $choice
fi
#+end_src

* Wallpaper
Set random wallpapers
** Dependencies
|-------------+----------------------|
| App         | Comment              |
|-------------+----------------------|
| =rofi -dmenu= | Triggers dmenu       |
| =xrandr=      | Screen management    |
| =nitrogen=    | Wallpaper management |
|-------------+----------------------|

** Setup
#+begin_src shell :tangle dmwallpaper :shebang #!/usr/bin/env bash
# Specifying a directory with wallpapers and make sure it exists
wall_dir="$HOME/Pictures/wallpapers"
mkdir -p "${wall_dir}"

# get the number of connected screens
screens=$(xrandr | grep -e "\sconnected" | wc -l)
#+end_src

*** Update auto-start
I am using a shell script to call =dmwallpaper= to set random wallpapers from set sub-directory, which is being called on WM start. This section updates the directory in that script every time I call =dmwallpaper= to set a different sub-directory.
As long as you specify the correct path to the dmscript there and the dmscript is named =dmwallpaper= it will update it automatically. All you really need to do is set =autostart_script= variable to the correct path to the auto-start script.
#+begin_example shell
~/.local/bin/dmscripts/dmwallpaper flat &
#+end_example

The function is agnostic to the path to =dmwallpaper=, so as long as the dmscript is named =dmwallpaper=, it will update it automatically. All you really need to do is set =autostart_script= variable to the correct path to the auto-start script.
#+begin_src shell :tangle dmwallpaper
autostart_script="$HOME/.config/autostart-scripts/autostart.sh"

updateAutostart(){
    sed -i "s/\(.*dmwallpaper\).*$/\1 $1 \&/" $autostart_script
}
#+end_src

** DMenu
#+begin_src shell :tangle dmwallpaper
dmenu_prompt="Wallpaper Category"
#+end_src

** Main Function
#+begin_src shell :tangle dmwallpaper
setRandomWallpaper(){
    if [ -z "$1" ]; then
        return
    fi

    for (( i = 0; i < $screens; i++ )); do
        nitrogen --set-zoom-fill --random --head=$i $wall_dir/$1/
    done

    # Comment out this line if you don't use an autostart script to set random wallpapers using this dmscript
    updateAutostart "$1"
}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell :tangle dmwallpaper
if [ ! $# -eq 0 ]; then setRandomWallpaper $1
#+end_src

If no arguments were passed, present dmenu to user with options based on the available sub-directories in $wall_dir
We use "printf '%s\n'" to format the array one item to a line
#+begin_src shell :tangle dmwallpaper
else
    choice=$(\ls $wall_dir --hide="*.*" | rofi -dmenu -i -p "${dmenu_prompt}")
    setRandomWallpaper $choice
fi
#+end_src

#+TITLE: dmscripts
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: A collection of dmenu scripts
#+STARTUP: overview

* Table of Contents :toc:
- [[#grub-reboot-to-windows][GRUB Reboot to Windows]]
- [[#dm-notify][dm-notify]]
  - [[#dependencies][Dependencies]]
  - [[#setup][Setup]]
  - [[#functions][Functions]]
  - [[#handling-input][Handling Input]]
- [[#dm-lock][dm-lock]]
  - [[#dependencies-1][Dependencies]]
  - [[#setup-1][Setup]]
  - [[#functions-1][Functions]]
- [[#dm-power][dm-power]]
  - [[#dependencies-2][Dependencies]]
  - [[#setup-2][Setup]]
  - [[#functions-2][Functions]]
  - [[#handling-input-1][Handling Input]]
- [[#dm-screenshot][dm-screenshot]]
  - [[#dependencies-3][Dependencies]]
  - [[#setup-3][Setup]]
  - [[#functions-3][Functions]]
  - [[#handling-input-2][Handling Input]]
- [[#dm-record][dm-record]]
  - [[#dependencies-4][Dependencies]]
  - [[#setup-4][Setup]]
  - [[#functions-4][Functions]]
  - [[#handling-input-3][Handling Input]]
- [[#dm-wallpaper][dm-wallpaper]]
  - [[#dependencies-5][Dependencies]]
  - [[#setup-5][Setup]]
  - [[#functions-5][Functions]]
  - [[#handling-input-4][Handling Input]]

* GRUB Reboot to Windows
To reboot to windows without having to interact with grub during boot time create an executable shell script that will switch grub next 1 boot to a named entry, in my case it is a custom entry "*Windows 10*", but by default it be something like "*Windows boot manager*" as created by =os-prober=.
- Needs to be run as =sudo=
#+begin_src shell
# /home/user/.local/bin/winreboot

#!/usr/bin/env bash
grub-reboot "Windows 10" && systemctl reboot
#+end_src

If you want to call this from the Desktop Environment you may need to allow the script to be run without the =sudo= password. This can be achieved by adding it to your =sudoers= list as per below.
- It is recommended that you change the owner of the file to root and remove write permissions for other users so it cannot be changed without the root password as this can become a security vulnerability (anything in the script will be executed as =sudo= without a password prompt after all)
- This script is actually called in the [[#power][dmpower]] script with =sudo= to make use of this
#+begin_src conf
# /etc/sudoers.d/00-windows-reboot

user ALL=(ALL) NOPASSWD: /home/user/.local/bin/winreboot
#+end_src

* dm-notify
Manage notifications
** Dependencies
|-------------+---------------------|
| App         | Comment             |
|-------------+---------------------|
| =rofi -dmenu= | Triggers dmenu      |
| =dunst=       | Notification server |
|-------------+---------------------|

** Setup
Get the number of notifications
#+begin_src shell :tangle dm-notify :shebang #!/usr/bin/env bash
declare -a options
#+end_src

DMenu
#+begin_src shell :tangle dm-notify
dmenu_prompt="Notifications"
options=(
    "Show recent"
    "Close"
    "Close all"
    "Context menu"
)
#+end_src

** Functions
#+begin_src shell :tangle dm-notify
notif_count_history=$(dunstctl count history)
notif_count_displayed=$(dunstctl count displayed)
notif_count_wait=$(dunstctl count waiting)

execute_choice() {
    case $1 in
        close) dunstctl close;;
        clear) dunstctl close-all;;
        recents)
            for ((i = 1; i <= $notif_count_history; i++));
            do
                dunstctl history-pop
            done
            ;;
        ,*) dunstctl context;;
    esac
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell :tangle dm-notify
[ ! $# -eq 0 ] && execute_choice $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell :tangle dm-notify
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${dmenu_prompt}")
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell :tangle dm-notify
case $choice in
    'Show recent') execute_choice recents ;;
    'Close') execute_choice close ;;
    'Close all') execute_choice close-all ;;
    'Context menu') execute_choice context ;;
esac
#+end_src

* dm-lock
Trigger lock-screen/screen-saver
** Dependencies
|--------------+---------|
| App          | Comment |
|--------------+---------|
| i3lock-color |         |
|--------------+---------|

** Setup
#+begin_src shell :tangle dm-lock :shebang #!/bin/sh
time_format='%l:%M %p'
date_format='%d %b, %Y'

blank='#28282855'
text='#ebdbb2'
dark='#282828'
default='#fabd2fcc'
wrong='#fb4934bb'
verifying='#b8bb26cb'
type='#d65d0e'
delete='#cc241d'
#+end_src

** Functions
For debugging purposes add =--no-verif=
#+begin_src shell :tangle dm-lock
i3lock \
    --clock \
    --screen 1 \
    --ignore-empty-password \
    --pass-media-keys --pass-screen-keys --pass-volume-keys \
    \
    --time-str="$time_format" --date-str="$date_format" \
    --greeter-text="Type password to unlock..." \
    --time-pos="w-w/2:y+200" --date-pos="tx:ty+50" \
    --layout-pos="ix:iy+100" \
    \
    --radius=200 --ring-width=10 \
    --time-size=120 --date-size=32 --layout-size=22 \
    --keylayout=2 \
    \
    --color=$blank \
    --time-color=$text --date-color=$text --greeter-color=$text --layout-color=$text --modif-color=$text         \
    \
    --separator-color=$default --line-color=$blank \
    --keyhl-color=$type --bshl-color=$delete \
    --ring-color=$default      --inside-color=$blank        \
    --ringver-color=$verifying --insidever-color=$verifying --verif-color=$dark          \
    --ringwrong-color=$wrong   --insidewrong-color=$wrong   --wrong-color=$dark          \
#+end_src

* dm-power
Logout, shutdown, reboot or lock screen
** Dependencies
|--------------+-------------------------|
| App          | Comment                 |
|--------------+-------------------------|
| =rofi -dmenu=  | Triggers dmenu          |
| =systemd=      | System management       |
| =xscreensaver= | Toggle screensaver      |
| =notify-send=  | Trigger a notifications |
|--------------+-------------------------|
** Setup
#+begin_src shell :tangle dm-power :shebang #!/usr/bin/env bash
declare -a dmenu_options
#+end_src

Define =LOCKER= in =.xprofile= to set to different locker program
#+begin_src shell :tangle dm-power
# LOCKER="${LOCKER:-lock}"
LOCKER="$HOME/.local/bin/dmscripts/dm-lock"
# LOCKER="xscreensaver-command -lock"

# use notify-send if run in dumb term
output="echo"
if [[ ${TERM} == 'dumb' ]]; then
    output="notify-send"
fi

yesno() {
    # shellcheck disable=SC2005
    echo "$(echo -e "No\nYes" | rofi -dmenu -i -p "${1}")"
}

declare -a managers=(
    "awesome"
    "bspwm"
    "dwm"
    "spectrwm"
    "xmonad"
    "qtile"
)
#+end_src

DMenu
#+begin_src shell :tangle dm-power
dmenu_prompt="Shutdown menu"
declare -a options=(
    "Suspend"
    "Reboot"
    "Shutdown"
    "Logout"
    "Lock screen"
    "Reboot to Windows"
    "Quit"
)
#+end_src

** Functions
Check [[#grub-reboot-to-windows][GRUB Reboot to Windows]] for the =winreboot= script setup
#+begin_src shell :tangle dm-power
execute_choice() {
    if [[ $1 == 'lock' ]]; then ${LOCKER}
    elif [[ $1 == 'reboot' ]]; then systemctl reboot
    elif [[ $1 == 'windows' ]]; then sudo $HOME/.local/bin/winreboot
    elif [[ $1 == 'poweroff' ]]; then systemctl poweroff
    elif [[ $1 == 'suspend' ]]; then systemctl suspend
    elif [[ $1 == 'quit' ]]; then ${output} "Program terminated." && exit 0
    else ${output} "Program terminated." && exit 0
    fi
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell :tangle dm-power
[ ! $# -eq 0 ] && execute_choice $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu-1][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell :tangle dm-power
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${dmenu_prompt}")
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell :tangle dm-power
case $choice in
    'Logout')
        if [[ $(yesno "Logout?") == "Yes" ]]; then
            for manager in "${managers[@]}"; do
                killall "${manager}" || ${output} "Process ${manager} was not running."
            done
        else
            ${output} "User chose not to logout." && exit 1
        fi
        ;;
    'Lock screen') execute_choice lock ;;
    'Reboot')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice reboot
        else
            ${output} "User chose not to reboot." && exit 0
        fi
        ;;
    'Reboot to Windows')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice windows
        else
            ${output} "User chose not to reboot." && exit 0
        fi
        ;;
    'Shutdown')
        if [[ $(yesno "Shutdown?") == "Yes" ]]; then
            execute_choice poweroff
        else
            ${output} "User chose not to shutdown." && exit 0
        fi
        ;;
    'Suspend')
        if [[ $(yesno "Suspend?") == "Yes" ]]; then
            execute_choice suspend
        else
            ${output} "User chose not to suspend." && exit 0
        fi
        ;;
    'Quit') execute_choice quit ;;
    # It is a common practice to use the wildcard asterisk symbol (*) as a final
    # pattern to define the default case. This pattern will always match.
    ,*)
        exit 0
        ;;
esac
#+end_src

* dm-screenshot
Take a screenshot
** Dependencies
|-------------+-------------------|
| App         | Comment           |
|-------------+-------------------|
| =rofi -dmenu= | Triggers dmenu    |
| =xrandr=      | Screen management |
| =main=        | Screenshot tool   |
| =xdotool=     | Get active window |
|-------------+-------------------|

** Setup
#+begin_src shell :tangle dm-screenshot :shebang #!/usr/bin/env bash
# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

declare -a dmenu_options
#+end_src

Specifying a directory to save our screenshots and make sure it exists
#+begin_src shell :tangle dm-screenshot
screen_dir="$(xdg-user-dir PICTURES)/screenshots"
mkdir -p "${screen_dir}"
#+end_src

Filename Time Stamp Format
#+begin_src shell :tangle dm-screenshot
timestamp='+%Y-%m-%d_%T'
#+end_src

Get monitors and their settings for maim
#+begin_src shell :tangle dm-screenshot
displays=$(xrandr --listactivemonitors | grep '+' | awk '{print $4, $3}' | awk -F'[x/+* ]' '{print $1,$2"x"$4"+"$6"+"$7}')
#+end_src

Add monitor data
#+begin_src shell :tangle dm-screenshot
IFS=$'\n'
declare -A display_mode

for d in ${displays}; do
    name=$(echo "${d}" | awk '{print $1}')
    area="$(echo "${d}" | awk '{print $2}')"
    display_mode[${name}]="${area}"
done

unset IFS
#+end_src

DMenu
#+begin_src shell :tangle dm-screenshot
prompt="Select what to screenshot"
options=(
    "full"
    "screen"
    "window"
    "area"
)
#+end_src

** Functions
#+begin_src shell :tangle dm-screenshot
main_args=""

takeScreenshot() {
    case $1 in
        full) main_args="-u -m 1";;
        screen) main_args="-u -g ${display_mode['DVI-D-0']} -m 1";;
        window) main_args="-u -B -i $(xdotool getactivewindow) -m 1" ;;
        area) main_args="-u -B -s -n -m 1";;
        ,*)
            echo -e "Only the following arguments are accepted:\n"
            printf '%s\n' "${options[@]}"
            ;;
    esac

    if [[ $main_args == "" ]]; then return; fi
    
    maim ${main_args} "${screen_dir}/$(date $timestamp).png" || exit
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell :tangle dm-screenshot
[ ! $# -eq 0 ] && takeScreenshot $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu-2][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell :tangle dm-screenshot
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

# Act on user selection
[ $choice ] && takeScreenshot $choice
#+end_src

* dm-record
Record video/audio
** Dependencies
|-------------+--------------------------|
| App         | Comment                  |
|-------------+--------------------------|
| =rofi -dmenu= | Triggers dmenu           |
| =ffmpeg=      | Video converter/recorder |
| =slop=        | Window selector          |
|-------------+--------------------------|

** Setup
#+begin_src shell :tangle dm-record :shebang #!/usr/bin/env bash
record_dir="$(xdg-user-dir VIDEOS)/recordings"
resolution='1920x1080'
timestamp='+%Y-%m-%d_%T'
fps='30'
#+end_src

Tracking process
#+begin_src shell :tangle dm-record
rec_proc="/tmp/recordingpid"
#+end_src

DMenu
#+begin_src shell :tangle dm-record
prompt="Record"
options=(
    "Screen"
    "Audio"
    "Camera"
)
#+end_src

** Functions
#+begin_src shell :tangle dm-record
yesno() {
    echo "$(echo -e "No\nYes" | rofi -dmenu -i -p "${1}")"
}

start_recording() {
    case "$1" in
        Screen) screen_capture;;
        Audio) echo audio;;
        Camera) echo camera;;
        *) echo Invalid input;;
    esac
}

stop_recording() {
    rec_pid="$(cat $rec_proc)"

    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$rec_pid"
    rm -f $rec_proc

    # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
    sleep 3
    kill -9 "$rec_pid"
    exit
}

screen_capture() {
    ffmpeg \
        -f x11grab \
        -video_size $resolution \
        -framerate $fps \
        -i "$DISPLAY" \
        -c:v libx264 \
        $record_dir/dm-$(date $timestamp).mkv &
    echo $! > $rec_proc
}
#+end_src

** Handling Input
Check if there is an active recordings and prompt user to stop it
#+begin_src shell :tangle dm-record
if [ -f $rec_proc ]
then [ $(yesno "Stop Active Recording?") = "Yes" ] && stop_recording || exit
#+end_src

Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell :tangle dm-record
elif [ ! $# -eq 0 ]
#+end_src

Execute script without presenting dmenu to the user if an argument was passed
#+begin_src shell :tangle dm-record
then start_recording $1
#+end_src

If no arguments were passed, present dmenu to user
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell :tangle dm-record
else
    # Prompt the user
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

    # Act on user selection
    [ $choice ] && start_recording $choice
fi
#+end_src

* dm-wallpaper
Set random wallpapers
** Dependencies
|-------------+----------------------|
| App         | Comment              |
|-------------+----------------------|
| =rofi -dmenu= | Triggers dmenu       |
| =xrandr=      | Screen management    |
| =nitrogen=    | Wallpaper management |
|-------------+----------------------|

** Setup
#+begin_src shell :tangle dm-wallpaper :shebang #!/usr/bin/env bash
declare -a dmenu_options
#+end_src

Specifying a directory with wallpapers and make sure it exists
#+begin_src shell :tangle dm-wallpaper
wall_dir="$HOME/Pictures/wallpapers"
mkdir -p "${wall_dir}"
#+end_src

Path to script that calls =dmwallpaper= on startup
#+begin_src shell :tangle dm-wallpaper
autostart_script="$HOME/.config/autostart-scripts/autostart.sh"
autostart_script_org="$HOME/.config/README.org"
#+end_src

Get the number of connected screens
#+begin_src shell :tangle dm-wallpaper
screens=$(xrandr | grep -e "\sconnected" | wc -l)
#+end_src

DMenu
#+begin_src shell :tangle dm-wallpaper
prompt="Wallpaper Category"
options=($(ls $wall_dir --hide="*.*"))
#+end_src

** Functions
I am using a shell script to call =dm-wallpaper= to set random wallpapers from a set sub-directory, which is being called on WM start.
- [[file:~/.config/README.org::*Auto-start][Auto-start]] ([[https://github.com/ArtemSmaznov/Dotfiles/tree/master/.config][repo]])

=updateAutostart= updates the directory in that script every time I call =dm-wallpaper= to set a different sub-directory.

As long as you specify the correct path to the dmscript there and the dmscript is named =dm-wallpaper= it will update it automatically. All you really need to do is set =autostart_script= variable to the correct path to the auto-start script.

The function is agnostic to the path to =dm-wallpaper=, so as long as the dmscript is named =dm-wallpaper=, it will be updated automatically. All you really need to do is set =autostart_script= variable to the correct path to the auto-start script.

#+begin_src shell :tangle dm-wallpaper
updateAutostart() {
    sed -i "s/\(.*dm-wallpaper\).*$/\1 $1 \&/" $autostart_script
    sed -i "s/\(.*dm-wallpaper\).*$/\1 $1 \&/" $autostart_script_org
}

setRandomWallpaper() {
    for (( i = 0; i < $screens; i++ )); do
        nitrogen --set-zoom-fill --random --head=$i $wall_dir/$1/
    done

    # Comment out this line if you don't use an autostart script to set random wallpapers using this dmscript
    updateAutostart "$1"
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell :tangle dm-wallpaper
[ ! $# -eq 0 ] && setRandomWallpaper $1 && exit
#+end_src

Present dmenu to user with options based on the available sub-directories in =$wall_dir=
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell :tangle dm-wallpaper
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

# Act on user selection
[ $choice ] && setRandomWallpaper $choice
#+end_src
